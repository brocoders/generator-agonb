{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "CreateCodeBuildResources": {
            "Fn::Equals": [
                true,
                true
            ]
        },
        "CreateWebSiteS3Bucket": {
            "Fn::Equals": [
                true,
                false
            ]
        },
        "UseSubnet": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "SubnetId"
                        },
                        "subnet-none"
                    ]
                }
            ]
        },
        "IsNodeProject": {
            "Fn::Equals": [
                {
                    "Ref": "ProjectEnv"
                },
                "nodejs"
            ]
        },
        "IsRailsProject": {
            "Fn::Equals": [
                {
                    "Ref": "ProjectEnv"
                },
                "rubyonrails"
            ]
        }
    },
    "Description": "A web application deployed to Amazon EC2.",
    "Metadata": {
        "CodeBuildImage": "aws/codebuild/eb-java-8-amazonlinux-64:2.4.3",
        "CreateCodeBuild": false,
        "ProjectTemplateId": "webapp-nodejs-ec2",
        "WebsiteS3Bucket": "AWS::NoValue",
        "AWS::CloudFormation::Designer": {
            "5695c7c1-64bf-4842-8b15-f9253b9902d9": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "e35a0033-2749-4f7c-bcab-3b73cc25df60": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "e8b971d1-a5b7-498f-82db-8b69a935b953": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 210
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "e35a0033-2749-4f7c-bcab-3b73cc25df60"
                ]
            },
            "41baf4e0-5872-449d-9268-bceed553ce3c": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "79de7073-be3c-4d5d-894f-35050896582d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "ef853ff6-de88-40ac-8a25-5501b3d4f5bd": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 210
                },
                "z": 1,
                "embeds": []
            },
            "d5ae0a18-806c-4e6e-9ac2-9da431ba4264": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 330
                },
                "z": 1,
                "embeds": []
            },
            "eaec80d6-fb1c-46da-adad-9475dba6d57f": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 300,
                    "y": 330
                },
                "z": 1,
                "embeds": []
            },
            "77ddcd78-b8a8-4ce8-90b0-79f91f57f32a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 420,
                    "y": 90
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "eaec80d6-fb1c-46da-adad-9475dba6d57f"
                ],
                "dependson": [
                    "41baf4e0-5872-449d-9268-bceed553ce3c"
                ]
            },
            "e74fb2b0-9f59-4968-8a6d-c3173dc3ed9a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 420,
                    "y": 210
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "e35a0033-2749-4f7c-bcab-3b73cc25df60"
                ]
            },
            "e9d71cb6-d724-4419-b50f-207d47b5f9be": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 420,
                    "y": 330
                },
                "z": 1,
                "embeds": []
            },
            "8437751b-cce9-4fc2-a878-001d81be3028": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 450
                },
                "z": 1,
                "embeds": []
            },
            "b4d01a01-0840-47df-9d69-847cdf4a2e65": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 180,
                    "y": 450
                },
                "z": 1,
                "embeds": []
            },
            "54228643-dbae-482e-b4db-1d6d3b52f94b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 420,
                    "y": 450
                },
                "z": 1,
                "embeds": []
            },
            "e4309d8b-6f3b-49ad-afee-90d2d4a43373": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 540,
                    "y": 90
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "54228643-dbae-482e-b4db-1d6d3b52f94b"
                ]
            },
            "2860fa53-223b-4cd1-af50-2e408fdae166": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 540,
                    "y": 210
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "e4309d8b-6f3b-49ad-afee-90d2d4a43373"
                ]
            },
            "64b34003-9678-493c-a234-a8e87400a9c2": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 540,
                    "y": 330
                },
                "z": 1,
                "embeds": []
            },
            "1729319d-c21e-465a-86a3-d54594e35446": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 540,
                    "y": 450
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "ef853ff6-de88-40ac-8a25-5501b3d4f5bd"
                ]
            },
            "1b72e3a4-9726-4577-92c4-4449175b695d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 60,
                    "y": 570
                },
                "z": 1,
                "embeds": [],
                "dependson": [
                    "b4d01a01-0840-47df-9d69-847cdf4a2e65",
                    "ef853ff6-de88-40ac-8a25-5501b3d4f5bd"
                ]
            }
        }
    },
    "Parameters": {
        "ProjectEnv": {
            "Description": "Core project technology",
            "Type": "String",
            "AllowedValues": ["nodejs", "rubyonrails"],
            "ConstraintDescription": "ProjectEnv must be one of: nodejs, rubyonrails."
        },
        "AppName": {
            "Description": "Name of the application.",
            "MaxLength": 100,
            "MinLength": 1,
            "Type": "String"
        },
        "InstanceType": {
            "Default": "t2.micro",
            "Description": "The Amazon EC2 instance type to use.",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "The name of the key pair used to make SSH connections to Amazon EC2 instances.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "ProjectId": {
            "AllowedPattern": "^[a-z]([a-z0-9-])+$",
            "ConstraintDescription": "Project IDs must be between 2 and 15 characters, begin with a letter, and only contain lowercase letters, numbers, and hyphens (-).",
            "Description": "Project ID.",
            "MaxLength": 15,
            "MinLength": 2,
            "Type": "String"
        },
        "RepositoryName": {
            "Description": "Github repository name.",
            "MaxLength": 100,
            "MinLength": 1,
            "Type": "String"
        },
        "RepositoryOwner": {
            "Description": "Github user.",
            "Default": "brocoders",
            "MaxLength": 100,
            "MinLength": 1,
            "Type": "String"
        },
        "RepositoryToken": {
            "Description": "Github user token.",
            "Default": "df6631bcecf48107a1c3a771f72d47b62a83327e",
            "MaxLength": 200,
            "MinLength": 1,
            "Type": "String"
        },
        "SubnetId": {
            "Default": "subnet-e4748282",
            "Description": "Id of the VPC subnet to use for Amazon EC2 instances launched for this project. Must be provided to launch load balancer",
            "Type": "String"
        },
        "VpcId": {
            "Description": "The ID of the Amazon Virtual Private Cloud (VPC) to use for Amazon EC2 instances.",
            "Type": "AWS::EC2::VPC::Id"
        },
        "DBName": {
            "Default": "MyDatabase",
            "Description": "MySQL database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBUser": {
            "Description": "Username for MySQL database access",
            "Type": "String",
            "Default": "root",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters 1-16 characters length."
        },
        "DBPassword": {
            "NoEcho": "true",
            "Description": "Password for MySQL database access",
            "Type": "String",
            "Default": "rootpassword",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters and be 8-41 characters length."
        },
        "DBAllocatedStorage": {
            "Default": "5",
            "Description": "The size of the database (Gb)",
            "Type": "Number",
            "MinValue": "5",
            "MaxValue": "1024",
            "ConstraintDescription": "must be between 5 and 1024Gb."
        },
        "DBInstanceClass": {
            "Description": "The database instance type",
            "Type": "String",
            "Default": "db.t2.micro",
            "AllowedValues": [
                "db.t2.micro",
                "db.m1.small",
                "db.m1.medium"
            ],
            "ConstraintDescription": "must select a valid database instance type."
        },
        "IAMPassword": {
            "NoEcho": "true",
            "Description": "Password for IAM user.",
            "MaxLength": 25,
            "MinLength": 1,
            "Type": "String",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "IAM password must contain only alphanumeric characters."
        },
        "HostedZone": {
            "Type": "String",
            "Default": "brocoders.xyz",
            "Description": "must match a route53 hosted zone without ending dot"
        },
        "SubDomain": {
            "Type": "String",
            "Default": "",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "Description": "Must contain only alphanumeric characters"
        },
        "SSLCertificateARN": {
            "Type": "String",
            "Default": "arn:aws:acm:us-west-2:443954526038:certificate/af59b0b1-9f27-4a9f-b37b-7453cc0ba8d9",
            "Description": "SSL Certficate ARN"
        },
        "SlackNotificationsHook": {
            "Type": "String"
        },
        "SshKeys": {
            "Type": "CommaDelimitedList",
            "Description": "List of authorized keys for instances"
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "PV64"
            },
            "t2.nano": {
                "Arch": "HVM64"
            },
            "t2.micro": {
                "Arch": "HVM64"
            },
            "t2.small": {
                "Arch": "HVM64"
            },
            "t2.medium": {
                "Arch": "HVM64"
            },
            "t2.large": {
                "Arch": "HVM64"
            },
            "m1.small": {
                "Arch": "PV64"
            },
            "m1.medium": {
                "Arch": "PV64"
            },
            "m1.large": {
                "Arch": "PV64"
            },
            "m1.xlarge": {
                "Arch": "PV64"
            },
            "m2.xlarge": {
                "Arch": "PV64"
            },
            "m2.2xlarge": {
                "Arch": "PV64"
            },
            "m2.4xlarge": {
                "Arch": "PV64"
            },
            "m3.medium": {
                "Arch": "HVM64"
            },
            "m3.large": {
                "Arch": "HVM64"
            },
            "m3.xlarge": {
                "Arch": "HVM64"
            },
            "m3.2xlarge": {
                "Arch": "HVM64"
            },
            "m4.large": {
                "Arch": "HVM64"
            },
            "m4.xlarge": {
                "Arch": "HVM64"
            },
            "m4.2xlarge": {
                "Arch": "HVM64"
            },
            "m4.4xlarge": {
                "Arch": "HVM64"
            },
            "m4.10xlarge": {
                "Arch": "HVM64"
            },
            "c1.medium": {
                "Arch": "PV64"
            },
            "c1.xlarge": {
                "Arch": "PV64"
            },
            "c3.large": {
                "Arch": "HVM64"
            },
            "c3.xlarge": {
                "Arch": "HVM64"
            },
            "c3.2xlarge": {
                "Arch": "HVM64"
            },
            "c3.4xlarge": {
                "Arch": "HVM64"
            },
            "c3.8xlarge": {
                "Arch": "HVM64"
            },
            "c4.large": {
                "Arch": "HVM64"
            },
            "c4.xlarge": {
                "Arch": "HVM64"
            },
            "c4.2xlarge": {
                "Arch": "HVM64"
            },
            "c4.4xlarge": {
                "Arch": "HVM64"
            },
            "c4.8xlarge": {
                "Arch": "HVM64"
            },
            "g2.2xlarge": {
                "Arch": "HVMG2"
            },
            "g2.8xlarge": {
                "Arch": "HVMG2"
            },
            "r3.large": {
                "Arch": "HVM64"
            },
            "r3.xlarge": {
                "Arch": "HVM64"
            },
            "r3.2xlarge": {
                "Arch": "HVM64"
            },
            "r3.4xlarge": {
                "Arch": "HVM64"
            },
            "r3.8xlarge": {
                "Arch": "HVM64"
            },
            "i2.xlarge": {
                "Arch": "HVM64"
            },
            "i2.2xlarge": {
                "Arch": "HVM64"
            },
            "i2.4xlarge": {
                "Arch": "HVM64"
            },
            "i2.8xlarge": {
                "Arch": "HVM64"
            },
            "d2.xlarge": {
                "Arch": "HVM64"
            },
            "d2.2xlarge": {
                "Arch": "HVM64"
            },
            "d2.4xlarge": {
                "Arch": "HVM64"
            },
            "d2.8xlarge": {
                "Arch": "HVM64"
            },
            "hi1.4xlarge": {
                "Arch": "HVM64"
            },
            "hs1.8xlarge": {
                "Arch": "HVM64"
            },
            "cr1.8xlarge": {
                "Arch": "HVM64"
            },
            "cc2.8xlarge": {
                "Arch": "HVM64"
            }
        },
        "AWSInstanceType2NATArch": {
            "t1.micro": {
                "Arch": "NATPV64"
            },
            "t2.nano": {
                "Arch": "NATHVM64"
            },
            "t2.micro": {
                "Arch": "NATHVM64"
            },
            "t2.small": {
                "Arch": "NATHVM64"
            },
            "t2.medium": {
                "Arch": "NATHVM64"
            },
            "t2.large": {
                "Arch": "NATHVM64"
            },
            "m1.small": {
                "Arch": "NATPV64"
            },
            "m1.medium": {
                "Arch": "NATPV64"
            },
            "m1.large": {
                "Arch": "NATPV64"
            },
            "m1.xlarge": {
                "Arch": "NATPV64"
            },
            "m2.xlarge": {
                "Arch": "NATPV64"
            },
            "m2.2xlarge": {
                "Arch": "NATPV64"
            },
            "m2.4xlarge": {
                "Arch": "NATPV64"
            },
            "m3.medium": {
                "Arch": "NATHVM64"
            },
            "m3.large": {
                "Arch": "NATHVM64"
            },
            "m3.xlarge": {
                "Arch": "NATHVM64"
            },
            "m3.2xlarge": {
                "Arch": "NATHVM64"
            },
            "m4.large": {
                "Arch": "NATHVM64"
            },
            "m4.xlarge": {
                "Arch": "NATHVM64"
            },
            "m4.2xlarge": {
                "Arch": "NATHVM64"
            },
            "m4.4xlarge": {
                "Arch": "NATHVM64"
            },
            "m4.10xlarge": {
                "Arch": "NATHVM64"
            },
            "c1.medium": {
                "Arch": "NATPV64"
            },
            "c1.xlarge": {
                "Arch": "NATPV64"
            },
            "c3.large": {
                "Arch": "NATHVM64"
            },
            "c3.xlarge": {
                "Arch": "NATHVM64"
            },
            "c3.2xlarge": {
                "Arch": "NATHVM64"
            },
            "c3.4xlarge": {
                "Arch": "NATHVM64"
            },
            "c3.8xlarge": {
                "Arch": "NATHVM64"
            },
            "c4.large": {
                "Arch": "NATHVM64"
            },
            "c4.xlarge": {
                "Arch": "NATHVM64"
            },
            "c4.2xlarge": {
                "Arch": "NATHVM64"
            },
            "c4.4xlarge": {
                "Arch": "NATHVM64"
            },
            "c4.8xlarge": {
                "Arch": "NATHVM64"
            },
            "g2.2xlarge": {
                "Arch": "NATHVMG2"
            },
            "g2.8xlarge": {
                "Arch": "NATHVMG2"
            },
            "r3.large": {
                "Arch": "NATHVM64"
            },
            "r3.xlarge": {
                "Arch": "NATHVM64"
            },
            "r3.2xlarge": {
                "Arch": "NATHVM64"
            },
            "r3.4xlarge": {
                "Arch": "NATHVM64"
            },
            "r3.8xlarge": {
                "Arch": "NATHVM64"
            },
            "i2.xlarge": {
                "Arch": "NATHVM64"
            },
            "i2.2xlarge": {
                "Arch": "NATHVM64"
            },
            "i2.4xlarge": {
                "Arch": "NATHVM64"
            },
            "i2.8xlarge": {
                "Arch": "NATHVM64"
            },
            "d2.xlarge": {
                "Arch": "NATHVM64"
            },
            "d2.2xlarge": {
                "Arch": "NATHVM64"
            },
            "d2.4xlarge": {
                "Arch": "NATHVM64"
            },
            "d2.8xlarge": {
                "Arch": "NATHVM64"
            },
            "hi1.4xlarge": {
                "Arch": "NATHVM64"
            },
            "hs1.8xlarge": {
                "Arch": "NATHVM64"
            },
            "cr1.8xlarge": {
                "Arch": "NATHVM64"
            },
            "cc2.8xlarge": {
                "Arch": "NATHVM64"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "PV64": "ami-2a69aa47",
                "HVM64": "ami-6869aa05",
                "HVMG2": "ami-3353c649"
            },
            "us-west-2": {
                "PV64": "ami-7f77b31f",
                "HVM64": "ami-7172b611",
                "HVMG2": "ami-58ce1220"
            },
            "us-west-1": {
                "PV64": "ami-a2490dc2",
                "HVM64": "ami-31490d51",
                "HVMG2": "ami-62ad9502"
            },
            "eu-west-1": {
                "PV64": "ami-4cdd453f",
                "HVM64": "ami-f9dd458a",
                "HVMG2": "ami-41bc0a38"
            },
            "eu-west-2": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "ami-886369ec",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-west-3": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "NOT_SUPPORTED",
                "HVMG2": "NOT_SUPPORTED"
            },
            "eu-central-1": {
                "PV64": "ami-6527cf0a",
                "HVM64": "ami-ea26ce85",
                "HVMG2": "ami-b50d8fda"
            },
            "ap-northeast-1": {
                "PV64": "ami-3e42b65f",
                "HVM64": "ami-374db956",
                "HVMG2": "ami-14e45872"
            },
            "ap-northeast-2": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "ami-2b408b45",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ap-southeast-1": {
                "PV64": "ami-df9e4cbc",
                "HVM64": "ami-a59b49c6",
                "HVMG2": "ami-2a80d649"
            },
            "ap-southeast-2": {
                "PV64": "ami-63351d00",
                "HVM64": "ami-dc361ebf",
                "HVMG2": "ami-02c42e60"
            },
            "ap-south-1": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "ami-ffbdd790",
                "HVMG2": "ami-f6165899"
            },
            "us-east-2": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "ami-f6035893",
                "HVMG2": "NOT_SUPPORTED"
            },
            "ca-central-1": {
                "PV64": "NOT_SUPPORTED",
                "HVM64": "ami-730ebd17",
                "HVMG2": "NOT_SUPPORTED"
            },
            "sa-east-1": {
                "PV64": "ami-1ad34676",
                "HVM64": "ami-6dd04501",
                "HVMG2": "NOT_SUPPORTED"
            },
            "cn-north-1": {
                "PV64": "ami-77559f1a",
                "HVM64": "ami-8e6aa0e3",
                "HVMG2": "NOT_SUPPORTED"
            },
            "cn-northwest-1": {
                "PV64": "ami-80707be2",
                "HVM64": "ami-cb858fa9",
                "HVMG2": "NOT_SUPPORTED"
            }
        }
    ,
        "ProjectEnvMap": {
            "nodejs": {
                "StackDescription": "A NodeJs web application deployed to Amazon EC2.",
                "CodeBuildImage": "aws/codebuild/nodejs:10.14.1",
                "AppInstancePort": "3000",
                "AppHealthCheckTarget": "HTTP:3000/"
            },
            "rubyonrails": {
                "StackDescription": "A Ruby On Rails web application deployed to Amazon EC2.",
                "CodeBuildImage": "aws/codebuild/ruby:2.5.3",
                "AppInstancePort": "80",
                "AppHealthCheckTarget": "HTTP:80/api/health_check"
            }
        }
    },
    "Resources": {
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "6",
                    "Target": {
                        "Fn::FindInMap": ["ProjectEnvMap", { "Ref": "ProjectEnv" }, "AppHealthCheckTarget"]
                    },
                    "Timeout": "5",
                    "UnhealthyThreshold": "10"
                },
                "Instances": [
                    {
                        "Ref": "WebApp01"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "SubnetId"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "LBCookieStickinessPolicy": [
                    {
                        "PolicyName": "PublicELBCookieStickinessPolicy",
                        "CookieExpirationPeriod": "3600"
                    }
                ],
                "Listeners": [
                    {
                        "InstancePort": {
                            "Fn::FindInMap": ["ProjectEnvMap", { "Ref": "ProjectEnv" }, "AppInstancePort"]
                        },
                        "LoadBalancerPort": "443",
                        "InstanceProtocol": "HTTP",
                        "Protocol": "HTTPS",
                        "PolicyNames": [
                            "PublicELBCookieStickinessPolicy"
                        ],
                        "SSLCertificateId": {
                            "Ref": "SSLCertificateARN"
                        }
                    },
                    {
                        "InstancePort": {
                            "Fn::FindInMap": ["ProjectEnvMap", { "Ref": "ProjectEnv" }, "AppInstancePort"]
                        },
                        "LoadBalancerPort": "80",
                        "InstanceProtocol": "HTTP",
                        "Protocol": "HTTP",
                        "PolicyNames": [
                            "PublicELBCookieStickinessPolicy"
                        ]
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${SubDomain}-ELB"
                        }
                    }
                ]
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": {
                    "Fn::Sub": "Setup in/out traffic for ${AppName}"
                },
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AppName}-ELB-SecurityGroup"
                        }
                    }
                ]
            }
        },
        "DNSRecordSet": {
            "Type": "AWS::Route53::RecordSetGroup",
            "Properties": {
                "HostedZoneName": {
                    "Fn::Sub": "${HostedZone}."
                },
                "Comment": {
                    "Fn::Sub": "Zone subdomain targeted to ELB."
                },
                "RecordSets": [
                    {
                        "Name": {
                            "Fn::Sub": "${SubDomain}.${HostedZone}."
                        },
                        "Type": "A",
                        "AliasTarget": {
                            "HostedZoneId": {
                                "Fn::GetAtt": [
                                    "ElasticLoadBalancer",
                                    "CanonicalHostedZoneNameID"
                                ]
                            },
                            "DNSName": {
                                "Fn::GetAtt": [
                                    "ElasticLoadBalancer",
                                    "CanonicalHostedZoneName"
                                ]
                            }
                        }
                    }
                ]
            }
        },
        "CarierWaveS3Bucket": {
            "DeletionPolicy": "Retain",
            "Description": "Creating Amazon S3 bucket for Carierwave",
            "Properties": {
                "AccessControl": "PublicRead",
                "BucketName": {
                    "Fn::Join": [
                        "-",
                        [
                            "aws",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Ref": "AWS::AccountId"
                            },
                            {
                                "Ref": "ProjectId"
                            },
                            "carierwave"
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ProjectId"
                                    },
                                    "S3Bucket"
                                ]
                            ]
                        }
                    }
                ]
            },
            "Type": "AWS::S3::Bucket"
        },
        "CarierWaveS3BucketNameSSM": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AppName"
                            },
                            "CarierWaveS3BucketNameSSM"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Ref": "CarierWaveS3Bucket"
                },
                "Description": "SSM Parameter for CarierWaveS3Bucket name."
            }
        },
        "IAMStackUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "LoginProfile": {
                    "Password": {
                        "Ref": "IAMPassword"
                    }
                },
                "Policies": [
                    {
                        "PolicyName": "S3CarierwaveBucketWritePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:ListBucket"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${CarierWaveS3Bucket}"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:PutObject",
                                        "s3:PutObjectAcl",
                                        "s3:GetObjectAcl",
                                        "s3:DeleteObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:s3:::${CarierWaveS3Bucket}/*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "IAMStackUserAccessKey": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {
                    "Ref": "IAMStackUser"
                }
            }
        },
        "IAMStackUserAccessKeySSM": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AppName"
                            },
                            "IAMStackUserAccessKeySSM"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Ref": "IAMStackUserAccessKey"
                },
                "Description": "SSM Parameter - IAMStackUserAccessKeySSM."
            }
        },
        "IAMStackUserSecretAccessKeySSM": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AppName"
                            },
                            "IAMStackUserSecretAccessKeySSM"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Fn::GetAtt": [
                        "IAMStackUserAccessKey",
                        "SecretAccessKey"
                    ]
                },
                "Description": "SSM Parameter - IAMStackUserSecretAccessKeySSM."
            }
        },
        "DBEC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Open database for access",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5432",
                        "ToPort": "5432",
                        "SourceSecurityGroupId": {
                            "Ref": "WebAppSG"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0e1cab0c-7899-4315-a2e3-c964f0547493"
                }
            }
        },
        "PostgreSQLDatabase": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "Engine": "postgres",
                "DBName": {
                    "Ref": "DBName"
                },
                "MultiAZ": false,
                "MasterUsername": {
                    "Ref": "DBUser"
                },
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "DBInstanceClass": {
                    "Ref": "DBInstanceClass"
                },
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "VPCSecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "DBEC2SecurityGroup",
                            "GroupId"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3079ebd1-1087-46c9-89e9-c0628c575c75"
                }
            }
        },
        "DatabasePasswordSSM": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AppName"
                            },
                            "db",
                            "password"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Ref": "DBPassword"
                },
                "Description": "SSM Parameter for db password.",
                "AllowedPattern": "[a-zA-Z0-9]*"
            }
        },
        "DatabaseNameSSM": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AppName"
                            },
                            "db",
                            "name"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Ref": "DBName"
                },
                "Description": "SSM Parameter for db name.",
                "AllowedPattern": "[a-zA-Z0-9]*"
            }
        },
        "DatabaseUserSSM": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AppName"
                            },
                            "db",
                            "user"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Ref": "DBUser"
                },
                "Description": "SSM Parameter for db user.",
                "AllowedPattern": "[a-zA-Z0-9]*"
            }
        },
        "DatabaseHostSSM": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "AppName"
                            },
                            "db",
                            "host"
                        ]
                    ]
                },
                "Type": "String",
                "Value": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Fn::GetAtt": [
                                    "PostgreSQLDatabase",
                                    "Endpoint.Address"
                                ]
                            }
                        ]
                    ]
                },
                "Description": "SSM Parameter for db user.",
                "AllowedPattern": ".*"
            }
        },
        "CodeBuildPolicy": {
            "Condition": "CreateCodeBuildResources",
            "Description": "Setting IAM policy for service role for Amazon EC2 instances",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:GetObjectVersion"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Fn::If": [
                                "CreateWebSiteS3Bucket",
                                {
                                    "Action": [
                                        "s3:PutObject*",
                                        "s3:GetObject",
                                        "s3:GetObjectVersion"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "AWS::NoValue"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "AWS::NoValue"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        {
                            "Action": [
                                "codecommit:GitPull"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        ":",
                                        [
                                            "arn",
                                            "aws",
                                            "codecommit",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            {
                                                "Ref": "RepositoryName"
                                            }
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Action": [
                                "kms:GenerateDataKey*",
                                "kms:Encrypt",
                                "kms:Decrypt"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        ":",
                                        [
                                            "arn:aws:kms",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            {
                                                "Fn::Join": [
                                                    "/",
                                                    [
                                                        "alias",
                                                        "aws/s3"
                                                    ]
                                                ]
                                            }
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "PolicyName": "CodeBuildPolicy",
                "Roles": [
                    {
                        "Ref": "CodeBuildRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e4309d8b-6f3b-49ad-afee-90d2d4a43373"
                }
            }
        },
        "CodeBuildPolicyS3LogsPolicy": {
            "DependsOn": ["CodeBuildRole"],
            "Condition": "CreateCodeBuildResources",
            "Type": "AWS::IAM::Policy",
            "Description": "CodeBuild policy for logging build details to S3 bucket.",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::ImportValue": "TestsCiProjectCodeBuildLogsS3Arn"
                                },
                                {
                                    "Fn::Join": [
                                        "/",
                                        [
                                            { "Fn::ImportValue": "TestsCiProjectCodeBuildLogsS3Arn" },
                                            "*"
                                        ]
                                    ]
                                }
                            ],
                            "Action": [
                                "s3:PutObject",
                                "s3:GetBucketAcl",
                                "s3:GetBucketLocation"
                            ]
                        }
                    ]
                },
                "PolicyName": "CodeBuildPolicyS3Logs",
                "Roles": [
                    {
                        "Ref": "CodeBuildRole"
                    }
                ]
            }
        },
        "TestCodeBuildProject": {
            "Condition": "CreateCodeBuildResources",
            "DependsOn": [
                "CodeBuildRole", "CodeBuildPolicy"
            ],
            "Properties": {
                "LogsConfig": {
                    "S3Logs": {
                        "Status": "ENABLED",
                        "Location": {
                            "Fn::Join": [
                                "/",
                                [
                                    {
                                        "Fn::ImportValue": "TestsCiProjectCodeBuildLogsS3Arn"
                                    },
                                    {
                                      "Ref": "ProjectId"
                                    },
                                    {
                                        "Fn::Sub": "${ProjectId}-test"
                                    }
                                ]
                            ]
                        }
                    }
                },
                "Artifacts": {
                    "Packaging": "zip",
                    "Type": "codepipeline"
                },
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            "AWS CodeBuild Project for ",
                            {
                                "Ref": "AppName"
                            }
                        ]
                    ]
                },
                "Environment": {
                    "ComputeType": "small",
                    "EnvironmentVariables": [
                        {
                            "Name": "S3_BUCKET",
                            "Value": {
                                "Ref": "S3Bucket"
                            }
                        },
                        {
                            "Name": "DB_PASSWORD",
                            "Value": {
                                "Ref": "DBPassword"
                            }
                        },
                        {
                            "Name": "DB_USER",
                            "Value": {
                                "Ref": "DBUser"
                            }
                        },
                        {
                            "Name": "DB_NAME",
                            "Value": {
                                "Ref": "DBName"
                            }
                        },
                        {
                            "Name": "SSM_PASSWORD_VARIABLE_NAME",
                            "Value": {
                                "Ref": "DatabasePasswordSSM"
                            }
                        },
                        {
                            "Name": "DB_HOST",
                            "Value": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::GetAtt": [
                                                "PostgreSQLDatabase",
                                                "Endpoint.Address"
                                            ]
                                        },
                                        {
                                            "Fn::GetAtt": [
                                                "PostgreSQLDatabase",
                                                "Endpoint.Port"
                                            ]
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Name": "WEBSITE_S3_PREFIX",
                            "Value": {
                                "Fn::If": [
                                    "CreateWebSiteS3Bucket",
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "https://s3-us-west-2.amazonaws.com/",
                                                {
                                                    "Ref": "AWS::NoValue"
                                                }
                                            ]
                                        ]
                                    },
                                    "NoVal"
                                ]
                            }
                        },
                        {
                            "Name": "WEBSITE_S3_BUCKET",
                            "Value": {
                                "Fn::If": [
                                    "CreateWebSiteS3Bucket",
                                    {
                                        "Ref": "AWS::NoValue"
                                    },
                                    "NoVal"
                                ]
                            }
                        },
                        {
                            "Name": "PROJECT_ID",
                            "Value": {
                              "Ref": "ProjectId"
                            }
                        }
                    ],
                    "Image": {
                        "Fn::FindInMap": ["ProjectEnvMap", { "Ref": "ProjectEnv" }, "CodeBuildImage"]
                    },
                    "Type": "container"
                },
                "Name": {
                    "Fn::Sub": "${ProjectId}-test"
                },
                "ServiceRole": {
                    "Ref": "CodeBuildRole"
                },
                "Source": {
                    "Type": "codepipeline",
                    "BuildSpec": "run.tests.buildspec.yml"
                }
            },
            "Type": "AWS::CodeBuild::Project",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "2860fa53-223b-4cd1-af50-2e408fdae166"
                }
            }
        },
        "CodeBuildRole": {
            "Condition": "CreateCodeBuildResources",
            "Description": "Creating service role in IAM for Amazon EC2 instances",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "codebuild.amazonaws.com"
                            }
                        }
                    ]
                },
                "Path": "/",
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ProjectId"
                            },
                            "CodeBuild"
                        ]
                    ]
                }
            },
            "Type": "AWS::IAM::Role",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "54228643-dbae-482e-b4db-1d6d3b52f94b"
                }
            }
        },
        "CodeDeployApplication": {
            "Description": "Configuring AWS CodeDeploy for project application",
            "Properties": {
                "ApplicationName": {
                    "Ref": "ProjectId"
                }
            },
            "Type": "AWS::CodeDeploy::Application",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "eaec80d6-fb1c-46da-adad-9475dba6d57f"
                }
            }
        },
        "CodeDeployTrustRole": {
            "Description": "Creating service role in IAM for AWS CodeDeploy",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codedeploy.amazonaws.com"
                                ]
                            },
                            "Sid": ""
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:DescribeInstances",
                                        "ec2:DescribeInstanceStatus"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "CodeDeployPolicy"
                    }
                ],
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ProjectId"
                            },
                            "CodeDeploy"
                        ]
                    ]
                }
            },
            "Type": "AWS::IAM::Role",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d5ae0a18-806c-4e6e-9ac2-9da431ba4264"
                }
            }
        },
        "CodePipelineTrustRole": {
            "Description": "Creating service role in IAM for AWS CodePipeline",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codepipeline.amazonaws.com"
                                ]
                            },
                            "Sid": 1
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:GetBucketVersioning",
                                        "s3:PutObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "S3Bucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "codecommit:CancelUploadArchive",
                                        "codecommit:GetBranch",
                                        "codecommit:GetCommit",
                                        "codecommit:GetUploadArchiveStatus",
                                        "codecommit:UploadArchive"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    "arn",
                                                    "aws",
                                                    "codecommit",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    {
                                                        "Ref": "RepositoryName"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "codedeploy:CreateDeployment",
                                        "codedeploy:GetApplicationRevision",
                                        "codedeploy:GetDeployment",
                                        "codedeploy:GetDeploymentConfig",
                                        "codedeploy:RegisterApplicationRevision"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    "arn",
                                                    "aws",
                                                    "codedeploy",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    "application",
                                                    {
                                                        "Ref": "CodeDeployApplication"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    "arn",
                                                    "aws",
                                                    "codedeploy",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    "deploymentgroup",
                                                    {
                                                        "Fn::Join": [
                                                            "/",
                                                            [
                                                                {
                                                                    "Ref": "CodeDeployApplication"
                                                                },
                                                                {
                                                                    "Ref": "DeploymentGroup"
                                                                }
                                                            ]
                                                        ]
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    "arn",
                                                    "aws",
                                                    "codedeploy",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    "deploymentconfig",
                                                    "*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Fn::If": [
                                        "CreateCodeBuildResources",
                                        {
                                            "Action": [
                                                "codebuild:StartBuild",
                                                "codebuild:BatchGetBuilds",
                                                "codebuild:StopBuild"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": [
                                                {
                                                    "Fn::GetAtt": [
                                                        "TestCodeBuildProject",
                                                        "Arn"
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "Ref": "AWS::NoValue"
                                        }
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "CodePipelinePolicy"
                    }
                ],
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ProjectId"
                            },
                            "CodePipeline"
                        ]
                    ]
                }
            },
            "Type": "AWS::IAM::Role",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "64b34003-9678-493c-a234-a8e87400a9c2"
                }
            }
        },
        "DeploymentGroup": {
            "DependsOn": [
                "WebApp01"
            ],
            "Description": "Creating AWS CodeDeploy deployment groups for project application",
            "Properties": {
                "ApplicationName": {
                    "Ref": "CodeDeployApplication"
                },
                "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
                "DeploymentGroupName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "ProjectId"
                            },
                            "-EnvWebApp"
                        ]
                    ]
                },
                "Ec2TagFilters": [
                    {
                        "Key": "Environment",
                        "Type": "KEY_AND_VALUE",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "ProjectId"
                                    },
                                    "-WebApp"
                                ]
                            ]
                        }
                    }
                ],
                "ServiceRoleArn": {
                    "Fn::GetAtt": [
                        "CodeDeployTrustRole",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::CodeDeploy::DeploymentGroup",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "77ddcd78-b8a8-4ce8-90b0-79f91f57f32a"
                }
            }
        },
        "ProjectPipeline": {
            "DependsOn": [
                "CodeDeployApplication",
                "CodePipelineTrustRole",
                "S3Bucket",
                "DatabasePasswordSSM",
                "DatabaseUserSSM",
                "DatabaseNameSSM",
                "DatabaseHostSSM",
                "IAMStackUserAccessKeySSM",
                "IAMStackUserSecretAccessKeySSM",
                "CarierWaveS3BucketNameSSM"
            ],
            "Description": "Creating a deployment pipeline for your project in AWS CodePipeline",
            "Properties": {
                "ArtifactStore": {
                    "Location": {
                        "Fn::Join": [
                            "-",
                            [
                                "aws",
                                {
                                    "Ref": "AWS::Region"
                                },
                                {
                                    "Ref": "AWS::AccountId"
                                },
                                {
                                    "Ref": "ProjectId"
                                },
                                "pipe"
                            ]
                        ]
                    },
                    "Type": "S3"
                },
                "Name": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ProjectId"
                            },
                            "Pipeline"
                        ]
                    ]
                },
                "RoleArn": {
                    "Fn::GetAtt": [
                        "CodePipelineTrustRole",
                        "Arn"
                    ]
                },
                "Stages": [
                    {
                        "Actions": [
                            {
                                "ActionTypeId": {
                                    "Category": "Source",
                                    "Owner": "ThirdParty",
                                    "Provider": "GitHub",
                                    "Version": 1
                                },
                                "Configuration": {
                                    "Branch": "master",
                                    "PollForSourceChanges": true,
                                    "OAuthToken": {
                                        "Fn::Sub": "${RepositoryToken}"
                                    },
                                    "Owner": {
                                        "Fn::Sub": "${RepositoryOwner}"
                                    },
                                    "Repo": {
                                        "Fn::Sub": "${RepositoryName}"
                                    }
                                },
                                "InputArtifacts": [],
                                "Name": "ApplicationSource",
                                "OutputArtifacts": [
                                    {
                                        "Name": {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "ProjectId"
                                                    },
                                                    "SourceArtifact"
                                                ]
                                            ]
                                        }
                                    }
                                ],
                                "RunOrder": 1
                            }
                        ],
                        "Name": "Source"
                    },
                    {
                        "Fn::If": [
                            "CreateCodeBuildResources",
                            {
                                "Actions": [
                                    {
                                        "ActionTypeId": {
                                            "Category": "Build",
                                            "Owner": "AWS",
                                            "Provider": "CodeBuild",
                                            "Version": 1
                                        },
                                        "Configuration": {
                                            "ProjectName": {
                                                "Fn::Sub": "${ProjectId}-test"
                                            }
                                        },
                                        "InputArtifacts": [
                                            {
                                                "Name": {
                                                    "Fn::Join": [
                                                        "-",
                                                        [
                                                            {
                                                                "Ref": "ProjectId"
                                                            },
                                                            "SourceArtifact"
                                                        ]
                                                    ]
                                                }
                                            }
                                        ],
                                        "Name": "CodeBuild",
                                        "OutputArtifacts": [
                                            {
                                                "Name": {
                                                    "Fn::Join": [
                                                        "-",
                                                        [
                                                            {
                                                                "Ref": "ProjectId"
                                                            },
                                                            "BuildArtifact"
                                                        ]
                                                    ]
                                                }
                                            }
                                        ],
                                        "RunOrder": 1
                                    }
                                ],
                                "Name": "Build"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Actions": [
                            {
                                "ActionTypeId": {
                                    "Category": "Deploy",
                                    "Owner": "AWS",
                                    "Provider": "CodeDeploy",
                                    "Version": 1
                                },
                                "Configuration": {
                                    "ApplicationName": {
                                        "Ref": "CodeDeployApplication"
                                    },
                                    "DeploymentGroupName": {
                                        "Ref": "DeploymentGroup"
                                    }
                                },
                                "InputArtifacts": [
                                    {
                                        "Name": {
                                            "Fn::Join": [
                                                "-",
                                                [
                                                    {
                                                        "Ref": "ProjectId"
                                                    },
                                                    "SourceArtifact"
                                                ]
                                            ]
                                        }
                                    }
                                ],
                                "Name": "Deploy",
                                "RunOrder": 1
                            }
                        ],
                        "Name": "Application"
                    }
                ]
            },
            "Type": "AWS::CodePipeline::Pipeline",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1b72e3a4-9726-4577-92c4-4449175b695d"
                }
            }
        },
        "S3ArtifactBucketPolicy": {
            "Description": "Setting Amazon S3 bucket policy for AWS CodePipeline access",
            "Properties": {
                "Bucket": {
                    "Ref": "S3Bucket"
                },
                "PolicyDocument": {
                    "Id": "SSEAndSSLPolicy",
                    "Statement": [
                        {
                            "Action": "s3:PutObject",
                            "Condition": {
                                "StringNotEquals": {
                                    "s3:x-amz-server-side-encryption": "aws:kms"
                                }
                            },
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ],
                            "Sid": "DenyUnEncryptedObjectUploads"
                        },
                        {
                            "Action": [
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:GetBucketVersioning"
                            ],
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": false
                                }
                            },
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::GetAtt": [
                                            "CodeDeployTrustRole",
                                            "Arn"
                                        ]
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "CodePipelineTrustRole",
                                            "Arn"
                                        ]
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "WebAppRole",
                                            "Arn"
                                        ]
                                    },
                                    {
                                        "Fn::If": [
                                            "CreateCodeBuildResources",
                                            {
                                                "Fn::GetAtt": [
                                                    "CodeBuildRole",
                                                    "Arn"
                                                ]
                                            },
                                            {
                                                "Ref": "AWS::NoValue"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            }
                                        ]
                                    ]
                                }
                            ],
                            "Sid": "OnlyCodePipelineGet"
                        },
                        {
                            "Action": [
                                "s3:PutObject"
                            ],
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": true
                                }
                            },
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::GetAtt": [
                                            "CodeDeployTrustRole",
                                            "Arn"
                                        ]
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "CodePipelineTrustRole",
                                            "Arn"
                                        ]
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "WebAppRole",
                                            "Arn"
                                        ]
                                    },
                                    {
                                        "Fn::If": [
                                            "CreateCodeBuildResources",
                                            {
                                                "Fn::GetAtt": [
                                                    "CodeBuildRole",
                                                    "Arn"
                                                ]
                                            },
                                            {
                                                "Ref": "AWS::NoValue"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            }
                                        ]
                                    ]
                                }
                            ],
                            "Sid": "OnlyCodePipelinePut"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Type": "AWS::S3::BucketPolicy",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1729319d-c21e-465a-86a3-d54594e35446"
                }
            }
        },
        "S3Bucket": {
            "DeletionPolicy": "Retain",
            "Description": "Creating Amazon S3 bucket for AWS CodePipeline artifacts",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [
                        "-",
                        [
                            "aws",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Ref": "AWS::AccountId"
                            },
                            {
                                "Ref": "ProjectId"
                            },
                            "pipe"
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ProjectId"
                                    },
                                    "S3Bucket"
                                ]
                            ]
                        }
                    }
                ],
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            },
            "Type": "AWS::S3::Bucket",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ef853ff6-de88-40ac-8a25-5501b3d4f5bd"
                }
            }
        },
        "SourceEventRole": {
            "Description": "IAM role to allow Amazon CloudWatch Events to trigger AWS CodePipeline execution",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "events.amazonaws.com"
                                ]
                            },
                            "Sid": 1
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "codepipeline:StartPipelineExecution"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                ":",
                                                [
                                                    "arn",
                                                    "aws",
                                                    "codepipeline",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    {
                                                        "Fn::Join": [
                                                            "-",
                                                            [
                                                                {
                                                                    "Ref": "ProjectId"
                                                                },
                                                                "Pipeline"
                                                            ]
                                                        ]
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "CloudWatchEventPolicy"
                    }
                ],
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ProjectId"
                            },
                            "CloudWatchEventRule"
                        ]
                    ]
                }
            },
            "Type": "AWS::IAM::Role",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "79de7073-be3c-4d5d-894f-35050896582d"
                }
            }
        },
        "WebApp01": {
            "Description": "Creating Amazon EC2 instances",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "WebAppInstanceProfile"
                },
                "ImageId": "ami-7172b611",
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": true,
                        "DeviceIndex": 0,
                        "GroupSet": [
                            {
                                "Ref": "WebAppSG"
                            }
                        ],
                        "SubnetId": {
                            "Fn::If": [
                                "UseSubnet",
                                {
                                    "Ref": "SubnetId"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Environment",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "ProjectId"
                                    },
                                    "-WebApp"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "ProjectId"
                                    },
                                    "-WebApp"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::If": [
                            "IsNodeProject",
                            {
                                "Fn::Join": [
                                    "\n\n",
                                    [
                                        "#!/bin/bash -x",
                                        "wget -O /usr/local/bin/get_authorized_keys https://s3-us-west-2.amazonaws.com/awscodestar-remote-access-us-west-2/get_authorized_keys",
                                        "chmod 755 /usr/local/bin/get_authorized_keys",
                                        "sed -i '/AuthorizedKeysCommand /s/.*/AuthorizedKeysCommand \\/usr\\/local\\/bin\\/get_authorized_keys/g' /etc/ssh/sshd_config",
                                        "sed -i '/AuthorizedKeysCommandUser /s/.*/AuthorizedKeysCommandUser root/g' /etc/ssh/sshd_config",
                                        "/etc/init.d/sshd restart",
                                        "IFS=,",
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "read SSH_KEYS_USR_INPUT <<< \"",
                                                    {
                                                        "Fn::Join": [
                                                            ",",
                                                            {
                                                                "Ref": "SshKeys"
                                                            }
                                                        ]
                                                    },
                                                    "\""
                                                ]
                                            ]
                                        },
                                        "for i in $SSH_KEYS_USR_INPUT; do echo $i >> /home/ec2-user/.ssh/authorized_keys; done",
                                        "yum update -y aws-cfn-bootstrap",
                                        "# Install the AWS CodeDeploy Agent.",
                                        "cd /home/ec2-user/",
                                        {
                                            "Fn::Sub": [
                                                "wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/codedeploy-agent.noarch.rpm",
                                                {}
                                            ]
                                        },
                                        "yum -y install codedeploy-agent.noarch.rpm",
                                        "# Install pip and python dev libraries.",
                                        "yum install -y python27-devel python27-pip gcc",
                                        "pip install boto3",
                                        "pip install pycrypto",
                                        "pip install --upgrade awscli",
                                        "# Install psql gem native extension dependencies.",
                                        "yum -y install curl",
                                        "yum -y install git",
                                        "yum -y install epel-release",
                                        "yum -y install postgresql-devel",
                                        "yum -y install gcc-c++ make",
                                        "# Install node.js as js runtime environment.",
                                        "mkdir /root/.nvm",
                                        "export NVM_DIR=\"/root/.nvm\"",
                                        "curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash",
                                        "[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"",
                                        "[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/bash_completion\"",
                                        "sudo echo 'export NVM_DIR=\"$HOME/.nvm\"' >> /root/.bash_profile",
                                        "sudo echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"' >> /root/.bash_profile",
                                        "sudo echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/bash_completion\"' >> /root/.bash_profile",
                                        "sudo echo 'export NVM_DIR=\"$HOME/.nvm\"' >> /root/.bashrc",
                                        "sudo echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"' >> /root/.bashrc",
                                        "sudo echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/bash_completion\"' >> /root/.bashrc",
                                        "nvm install --lts",
                                        "node --version",
                                        "npm i -g pm2",
                                        "# Install nginx.",
                                        "# yum install -y nginx",
                                        "# sed -i -- 's/80 default_server/81 default_server/' /etc/nginx/nginx.conf",
                                        "# Start ImageMagick install",
                                        "# wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm",
                                        "# rpm -Uvh epel-release-6*.rpm",
                                        "# wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm",
                                        "# rpm -Uvh remi-release-6*.rpm",
                                        "# enabling first repo in remi config",
                                        "sed -i -- \"0,/enabled=0/s/enabled=0/enabled=1/\" /etc/yum.repos.d/remi.repo",
                                        "# yum install -y ImageMagick ImageMagick-devel",
                                        "# End ImageMagick install",
                                        "rm /home/ec2-user/user_data.log",
                                        "echo node_version - $(node -v || echo N/A) >> /home/ec2-user/user_data.log",
                                        "echo npm_version - $(npm -v || echo N/A) >> /home/ec2-user/user_data.log",
                                        "echo nvm_version - $(nvm --version || echo N/A) >> /home/ec2-user/user_data.log",
                                        "echo $(pm2 -v || echo pm2 - N/A\n) >> /home/ec2-user/user_data.log",
                                        "echo $(yum history) >> /home/ec2-user/user_data.log"
                                    ]
                                ]
                            },
                            {
                                "Fn::If": [
                                    "IsRailsProject",
                                    {
                                        "Fn::Join": [
                                            "\n\n",
                                            [
                                                "#!/bin/bash -x",
                                                "yum update -y",
                                                {
                                                    "Fn::Sub": ["wget -O /usr/local/bin/get_authorized_keys https://s3-${AWS::Region}.amazonaws.com/awscodestar-remote-access-${AWS::Region}/get_authorized_keys", {}]
                                                },
                                                "chmod 755 /usr/local/bin/get_authorized_keys",
                                                "sed -i '/AuthorizedKeysCommand /s/.*/AuthorizedKeysCommand \\/usr\\/local\\/bin\\/get_authorized_keys/g' /etc/ssh/sshd_config",
                                                "sed -i '/AuthorizedKeysCommandUser /s/.*/AuthorizedKeysCommandUser root/g' /etc/ssh/sshd_config",
                                                "/etc/init.d/sshd restart",
                                                "yum update -y aws-cfn-bootstrap",
                                                "IFS=,",
                                                {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "read SSH_KEYS_USR_INPUT <<< \"",
                                                            {
                                                                "Fn::Join": [
                                                                    ",",
                                                                    {
                                                                        "Ref": "SshKeys"
                                                                    }
                                                                ]
                                                            },
                                                            "\""
                                                        ]
                                                    ]
                                                },
                                                "for i in $SSH_KEYS_USR_INPUT; do echo $i >> /home/ec2-user/.ssh/authorized_keys; done",
                                                "echo Install the AWS CodeDeploy Agent.",
                                                {
                                                    "Fn::Sub": ["cd /home/ec2-user/\n\nwget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/codedeploy-agent.noarch.rpm", {}]
                                                },
                                                "yum -y install codedeploy-agent.noarch.rpm",
                                                "echo Install pip and python dev libraries.",
                                                "yum -y install autoconf automake gcc gcc-c++ git libtool make nasm pkgconfig zlib-devel patch bison libffi-devel patch readline-devel sqlite-devel libyaml-devel openssl-devel",
                                                "yum install -y python27-devel python27-pip gcc",
                                                "pip install boto3",
                                                "pip install pycrypto",
                                                "pip install --upgrade awscli",
                                                "echo Install psql gem native extension dependencies.",
                                                "yum -y install postgresql-devel",
                                                "echo Install node.js as js runtime environment.",
                                                "curl -sL https://rpm.nodesource.com/setup | bash -",
                                                "yum install -y nodejs",
                                                "echo Install nginx.",
                                                "yum install -y nginx",
                                                "sed -i -- 's/80 default_server/81 default_server/' /etc/nginx/nginx.conf",
                                                "echo Start ImageMagick install",
                                                "wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm",
                                                "rpm -Uvh epel-release-6*.rpm",
                                                "wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm",
                                                "rpm -Uvh remi-release-6*.rpm",
                                                "echo enabling first repo in remi config",
                                                "sed -i -- '0,/enabled=0/s/enabled=0/enabled=1/' /etc/yum.repos.d/remi.repo",
                                                "yum install -y ImageMagick ImageMagick-devel",
                                                "echo End ImageMagick install",
                                                "echo Install RVM.",
                                                "gpg --keyserver hkp://keys.gnupg.net --recv-keys 7D2BAF1CF37B13E2069D6956105BD0E739499BDB",
                                                "curl -L get.rvm.io | bash -s stable",
                                                "source /etc/profile.d/rvm.sh",
                                                "rvm install 2.5.3",
                                                "gem update --system",
                                                "gem install bundler",
                                                "yum history"
                                            ]
                                        ]
                                    },
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            }
                        ]

                    }
                }
            },
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "41baf4e0-5872-449d-9268-bceed553ce3c"
                }
            }
        },
        "WebAppInstanceProfile": {
            "Description": "Creating Amazon EC2 instance profile for instances",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "WebAppRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e8b971d1-a5b7-498f-82db-8b69a935b953"
                }
            }
        },
        "WebAppRole": {
            "Description": "Creating service role in IAM for Amazon EC2 instances",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Sid": ""
                        }
                    ]
                },
                "Path": "/",
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ProjectId"
                            },
                            "WebApp"
                        ]
                    ]
                }
            },
            "Type": "AWS::IAM::Role",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e35a0033-2749-4f7c-bcab-3b73cc25df60"
                }
            }
        },
        "WebAppRolePolicies": {
            "Description": "Setting IAM policy for service role for Amazon EC2 instances",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "ssm:GetParameters"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::Join": [
                                                    ":",
                                                    [
                                                        "arn",
                                                        "aws",
                                                        "ssm",
                                                        {
                                                            "Ref": "AWS::Region"
                                                        },
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        },
                                                        "parameter"
                                                    ]
                                                ]
                                            },
                                            "/",
                                            {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        {
                                                            "Ref": "AppName"
                                                        },
                                                        "*"
                                                    ]
                                                ]
                                            }
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Action": [
                                "ec2:Describe*"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "s3:Get*",
                                "s3:List*"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Fn::Join": [
                                                    "-",
                                                    [
                                                        "aws-codedeploy",
                                                        {
                                                            "Ref": "AWS::Region"
                                                        }
                                                    ]
                                                ]
                                            },
                                            "*"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Fn::Join": [
                                                    "-",
                                                    [
                                                        "aws",
                                                        "codestar",
                                                        {
                                                            "Ref": "AWS::Region"
                                                        },
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        }
                                                    ]
                                                ]
                                            },
                                            {
                                                "Fn::Join": [
                                                    "/",
                                                    [
                                                        "",
                                                        {
                                                            "Ref": "ProjectId"
                                                        },
                                                        "ssh/*"
                                                    ]
                                                ]
                                            }
                                        ]
                                    ]
                                },
                                "arn:aws:s3:::awscodestar-remote-access-signatures-us-west-2/*",
                                "arn:aws:s3:::awscodestar-remote-access-us-west-2/*"
                            ]
                        },
                        {
                            "Action": [
                                "cloudformation:DescribeStackResources"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Ref": "AWS::StackId"
                                }
                            ]
                        },
                        {
                            "Action": [
                                "codedeploy:BatchGet*",
                                "codedeploy:Get*",
                                "codedeploy:List*"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        ":",
                                        [
                                            "arn",
                                            "aws",
                                            "codedeploy",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "application",
                                            {
                                                "Ref": "CodeDeployApplication"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        ":",
                                        [
                                            "arn",
                                            "aws",
                                            "codedeploy",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "deploymentgroup",
                                            {
                                                "Fn::Join": [
                                                    "/",
                                                    [
                                                        {
                                                            "Ref": "CodeDeployApplication"
                                                        },
                                                        {
                                                            "Ref": "DeploymentGroup"
                                                        }
                                                    ]
                                                ]
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        ":",
                                        [
                                            "arn",
                                            "aws",
                                            "codedeploy",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "deploymentconfig",
                                            "*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "PolicyName": "BackendPolicy",
                "Roles": [
                    {
                        "Ref": "WebAppRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e74fb2b0-9f59-4968-8a6d-c3173dc3ed9a"
                }
            }
        },
        "WebAppSG": {
            "Description": "Creating security group for Amazon EC2 instances",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80 and SSH access via port 22.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": {
                            "Fn::FindInMap": ["ProjectEnvMap", { "Ref": "ProjectEnv"}, "AppInstancePort"]
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Fn::FindInMap": ["ProjectEnvMap", { "Ref": "ProjectEnv"}, "AppInstancePort"]
                        }
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": 22,
                        "IpProtocol": "tcp",
                        "ToPort": 22
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "5695c7c1-64bf-4842-8b15-f9253b9902d9"
                }
            }
        },
        "ProjectPipelineTrigger": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "Description": "CloudWatch rule for triggering pipeline events",
            "Name": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "ProjectId"
                  },
                  "ProjectPipelineTrigger"
                ]
              ]
            },
            "EventPattern": {
              "source": [
                "aws.codepipeline"
              ],
              "detail-type": [
                "CodePipeline Action Execution State Change"
              ],
              "detail": {
                "state": [
                  "STARTED",
                  "FAILED",
                  "SUCCEEDED"
                ],
                "pipeline": [
                    {
                        "Fn::Join": [
                            "-",
                            [
                            {
                                "Ref": "ProjectId"
                            },
                            "Pipeline"
                            ]
                        ]
                    }
                ]
              }
            },
            "State": "ENABLED",
            "Targets": [
              {
                "Id": {
                  "Fn::Join": [
                    "",
                    [
                        {
                            "Ref": "ProjectId"
                        },
                        "CodePipeLineNotification"
                    ]
                  ]
                },
                "Arn": {
                  "Fn::ImportValue": "OpsCodePipelineNotification"
                },
                "InputTransformer": {
                  "InputPathsMap": {
                    "detail": "$.detail",
                    "version": "$.version",
                    "id": "$.id",
                    "detail-type": "$.detail-type",
                    "source": "$.source",
                    "account": "$.account",
                    "time": "$.time",
                    "region": "$.region",
                    "resources": "$.resources"
                  },
                  "InputTemplate": {
                    "Fn::Join": [
                        ",",
                        [
                            "{\"detail\": <detail>",
                            "\"version\": <version>",
                            "\"id\": <id>",
                            "\"detail-type\": <detail-type>",
                            "\"source\": <source>",
                            "\"account\": <account>",
                            "\"time\": <time>",
                            "\"region\": <region>",
                            "\"resources\": <resources>",
                            {
                                "Fn::Sub": "\"slackHookUrl\": \"${SlackNotificationsHook}\""
                            },
                            {
                                "Fn::Sub": "\"actionStageMap\": [{ \"stages\": [\"Source\", \"ApplicationSource\", \"STARTED\"] }, { \"stages\": [\"Build\", \"CodeBuild\", \"STARTED\"] }, { \"stages\": [\"Build\", \"CodeBuild\", \"SUCCEEDED\"] }, { \"stages\": [\"Build\", \"CodeBuild\", \"FAILED\"], \"options\": { \"codeBuildProject\": \"${TestCodeBuildProject}\" } }, { \"stages\": [\"Application\", \"Deploy\", \"SUCCEEDED\"] }]"
                            },
                            {
                                "Fn::Sub": "\"projectId\": \"${ProjectId}\"}"
                            }
                        ]
                    ]
                  }
                }
              }
           ]
         }
       }
    },
    "Outputs": {
        "CarierWaveBucketURL": {
            "Description": "URL for the carierwave S3 bucket",
            "Value": {
                "Fn::GetAtt": [
                    "CarierWaveS3Bucket",
                    "DomainName"
                ]
            }
        },
        "IAMAccessKey": {
            "Value": {
                "Ref": "IAMStackUserAccessKey"
            }
        },
        "IAMAccessKeySecret": {
            "Value": {
                "Fn::GetAtt": [
                    "IAMStackUserAccessKey",
                    "SecretAccessKey"
                ]
            }
        },
        "AppInstanceDNS": {
            "Description": "URL for the working Node Js web application",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "WebApp01",
                                "PublicDnsName"
                            ]
                        },
                        "/"
                    ]
                ]
            }
        },
        "AppInstanceIp": {
            "Description": "Application Instance Ip",
            "Value": {
                "Fn::GetAtt": ["WebApp01", "PublicIp"]
            }
        },
        "AppUrl": {
          "Description": "Application Instance Ip",
          "Value":{
              "Fn::Sub": "\"backendUrl\": \"https://${SubDomain}.${HostedZone}\""
          }
        }
    }
}